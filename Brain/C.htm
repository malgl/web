<!DOCTYPE html>
<html lang="ko">
	<head>
		<meta charset="UTF-8">
		<title>C &amp; C++</title>
		<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono">
		<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Nanum+Gothic+Coding">
		<style>
			.w50 {
				width: 50px;
			}
			.w150 {
				width: 150px;
			}
			.by {
				background-color: yellow;
			}
			.ar {
				text-align: right;
			}
			.coding {
				font-family: D2Coding, 'Nanum Gothic Coding', Monaco, 'IBM Plex Mono', Consolas, sans-serif;
			}
		</style>
	</head>
	<body>
		<h4>연산자 우선순위와 결합순서</h4>
		<table>
			<tr><td>연산순위<td>연산자<td>결합순서</tr>
			<tr><td>1<td>() [] -&gt; .<td>→</tr>
			<tr><td>2<td>! ~ ++ -- + - (type) * &amp; sizeof<td>←</tr>
			<tr><td>3<td>* / %<td>→</tr>
			<tr><td>4<td>+ -<td>→</tr>
			<tr><td>5<td>&lt;&lt; &gt;&gt;<td>→</tr>
			<tr><td>6<td>&lt; &lt;= &gt; &gt;=<td>→</tr>
			<tr><td>7<td>== !=<td>→</tr>
			<tr><td>8<td>&amp;<td>→</tr>
			<tr><td>9<td>^<td>→</tr>
			<tr><td>10<td>|<td>→</tr>
			<tr><td>11<td>&amp;&amp;<td>→</tr>
			<tr><td>12<td>||<td>→</tr>
			<tr><td>13<td>? :<td>←</tr>
			<tr><td>14<td>= += -= *= /= %= &= ^= |= &lt;&lt;= &gt;&gt;=<td>←</tr>
			<tr><td>15<td>,<td>→</tr>
		</table>
		<h4>Doubld Pointer</h4>
		<p>int i = 1000;
		<br>int *p  =&amp;i;
		<br>int **pp = &amp;p;</p>
		<table>
			<tr><td class="w150">0x2000<td class="w50"><td class="w150">0x3000<td class="w50"><td class="w150">0x4000<td class="w50"></tr>
			<tr style="height: 30px;"><td class="by ar">1000<td>i<td class="by ar">0x2000<td>p<td class="by ar">0x3000<td>pp</tr>
			<tr><td class="ar">i → 1000<td><td class="ar">p → 0x2000<td><td class="ar">pp → 0x3000<td></tr>
			<tr><td class="ar">&amp;i → 0x2000<td><td class="ar">&amp;p → 0x3000<td><td class="ar">&amp;pp → 0x4000<td></tr>
			<tr><td><td><td class="ar">*p → 1000<td><td class="ar">*pp → 0x2000<td></tr>
			<tr><td><td><td><td><td class="ar">**pp → 1000<td></tr>
		</table>
		<h4>Dynamic Allocation in C</h4>
		<div class="coding">void main(int argc, char *argv[])
		<br>{
		<br>&emsp;int i;
		<br>&emsp;char **pp;
		<br>&emsp;pp = malloc(5 * sizeof(char*));
		<br>&emsp;if(!pp){perror(&quot;Insufficient memory available\n&quot;); return;}
		<br>&emsp;for(i = 0; i &lt; 5; i++)
		<br>&emsp;{
		<br>&emsp;&emsp;pp[i] = malloc(9);
		<br>&emsp;&emsp;if(!pp[i]){perror(&quot;Insufficient memory available\n&quot;); return;}
		<br>&emsp;}
		<br>&emsp;// ...
		<br>&emsp;for(i = 0; i &lt; 5; i++)free(pp[i]);
		<br>&emsp;free(pp);
		<br>}</div>
		<h4>Dynamic Allocation in C++</h4>
		<div class="coding">void main(int argc, char *argv[])
		<br>{
		<br>&emsp;int i;
		<br>&emsp;char **pp;
		<br>&emsp;pp = new char*[5];
		<br>&emsp;for(i = 0; i &lt; 5; i++)pp[i] = new char[9];
		<br>&emsp;// ...
		<br>&emsp;for(i = 0; i &lt; 5; i++)delete[]pp[i];
		<br>&emsp;delete[]pp;
		<br>}</div>
	</body>
</html>
